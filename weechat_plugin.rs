/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub unsafe fn as_ptr(&self) -> *const T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut_ptr(&mut self) -> *mut T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
impl<T> ::std::clone::Clone for __IncompleteArrayField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
pub const _TIME_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201505;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 23;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const __time_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __timespec_defined: u32 = 1;
pub const _XLOCALE_H: u32 = 1;
pub const _SYS_TYPES_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
pub const _SIGSET_H_types: u32 = 1;
pub const _STRUCT_TIMEVAL: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _SYS_SYSMACROS_H: u32 = 1;
pub const _BITS_PTHREADTYPES_H: u32 = 1;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const __have_pthread_attr_t: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED: u32 = 1;
pub const _SYS_SOCKET_H: u32 = 1;
pub const _SYS_UIO_H: u32 = 1;
pub const _BITS_UIO_H: u32 = 1;
pub const UIO_MAXIOV: u32 = 1024;
pub const PF_UNSPEC: u32 = 0;
pub const PF_LOCAL: u32 = 1;
pub const PF_UNIX: u32 = 1;
pub const PF_FILE: u32 = 1;
pub const PF_INET: u32 = 2;
pub const PF_AX25: u32 = 3;
pub const PF_IPX: u32 = 4;
pub const PF_APPLETALK: u32 = 5;
pub const PF_NETROM: u32 = 6;
pub const PF_BRIDGE: u32 = 7;
pub const PF_ATMPVC: u32 = 8;
pub const PF_X25: u32 = 9;
pub const PF_INET6: u32 = 10;
pub const PF_ROSE: u32 = 11;
pub const PF_DECnet: u32 = 12;
pub const PF_NETBEUI: u32 = 13;
pub const PF_SECURITY: u32 = 14;
pub const PF_KEY: u32 = 15;
pub const PF_NETLINK: u32 = 16;
pub const PF_ROUTE: u32 = 16;
pub const PF_PACKET: u32 = 17;
pub const PF_ASH: u32 = 18;
pub const PF_ECONET: u32 = 19;
pub const PF_ATMSVC: u32 = 20;
pub const PF_RDS: u32 = 21;
pub const PF_SNA: u32 = 22;
pub const PF_IRDA: u32 = 23;
pub const PF_PPPOX: u32 = 24;
pub const PF_WANPIPE: u32 = 25;
pub const PF_LLC: u32 = 26;
pub const PF_IB: u32 = 27;
pub const PF_MPLS: u32 = 28;
pub const PF_CAN: u32 = 29;
pub const PF_TIPC: u32 = 30;
pub const PF_BLUETOOTH: u32 = 31;
pub const PF_IUCV: u32 = 32;
pub const PF_RXRPC: u32 = 33;
pub const PF_ISDN: u32 = 34;
pub const PF_PHONET: u32 = 35;
pub const PF_IEEE802154: u32 = 36;
pub const PF_CAIF: u32 = 37;
pub const PF_ALG: u32 = 38;
pub const PF_NFC: u32 = 39;
pub const PF_VSOCK: u32 = 40;
pub const PF_MAX: u32 = 41;
pub const AF_UNSPEC: u32 = 0;
pub const AF_LOCAL: u32 = 1;
pub const AF_UNIX: u32 = 1;
pub const AF_FILE: u32 = 1;
pub const AF_INET: u32 = 2;
pub const AF_AX25: u32 = 3;
pub const AF_IPX: u32 = 4;
pub const AF_APPLETALK: u32 = 5;
pub const AF_NETROM: u32 = 6;
pub const AF_BRIDGE: u32 = 7;
pub const AF_ATMPVC: u32 = 8;
pub const AF_X25: u32 = 9;
pub const AF_INET6: u32 = 10;
pub const AF_ROSE: u32 = 11;
pub const AF_DECnet: u32 = 12;
pub const AF_NETBEUI: u32 = 13;
pub const AF_SECURITY: u32 = 14;
pub const AF_KEY: u32 = 15;
pub const AF_NETLINK: u32 = 16;
pub const AF_ROUTE: u32 = 16;
pub const AF_PACKET: u32 = 17;
pub const AF_ASH: u32 = 18;
pub const AF_ECONET: u32 = 19;
pub const AF_ATMSVC: u32 = 20;
pub const AF_RDS: u32 = 21;
pub const AF_SNA: u32 = 22;
pub const AF_IRDA: u32 = 23;
pub const AF_PPPOX: u32 = 24;
pub const AF_WANPIPE: u32 = 25;
pub const AF_LLC: u32 = 26;
pub const AF_IB: u32 = 27;
pub const AF_MPLS: u32 = 28;
pub const AF_CAN: u32 = 29;
pub const AF_TIPC: u32 = 30;
pub const AF_BLUETOOTH: u32 = 31;
pub const AF_IUCV: u32 = 32;
pub const AF_RXRPC: u32 = 33;
pub const AF_ISDN: u32 = 34;
pub const AF_PHONET: u32 = 35;
pub const AF_IEEE802154: u32 = 36;
pub const AF_CAIF: u32 = 37;
pub const AF_ALG: u32 = 38;
pub const AF_NFC: u32 = 39;
pub const AF_VSOCK: u32 = 40;
pub const AF_MAX: u32 = 41;
pub const SOL_RAW: u32 = 255;
pub const SOL_DECNET: u32 = 261;
pub const SOL_X25: u32 = 262;
pub const SOL_PACKET: u32 = 263;
pub const SOL_ATM: u32 = 264;
pub const SOL_AAL: u32 = 265;
pub const SOL_IRDA: u32 = 266;
pub const SOMAXCONN: u32 = 128;
pub const _BITS_SOCKADDR_H: u32 = 1;
pub const _SS_SIZE: u32 = 128;
pub const FIOSETOWN: u32 = 35073;
pub const SIOCSPGRP: u32 = 35074;
pub const FIOGETOWN: u32 = 35075;
pub const SIOCGPGRP: u32 = 35076;
pub const SIOCATMARK: u32 = 35077;
pub const SIOCGSTAMP: u32 = 35078;
pub const SIOCGSTAMPNS: u32 = 35079;
pub const SOL_SOCKET: u32 = 1;
pub const SO_DEBUG: u32 = 1;
pub const SO_REUSEADDR: u32 = 2;
pub const SO_TYPE: u32 = 3;
pub const SO_ERROR: u32 = 4;
pub const SO_DONTROUTE: u32 = 5;
pub const SO_BROADCAST: u32 = 6;
pub const SO_SNDBUF: u32 = 7;
pub const SO_RCVBUF: u32 = 8;
pub const SO_SNDBUFFORCE: u32 = 32;
pub const SO_RCVBUFFORCE: u32 = 33;
pub const SO_KEEPALIVE: u32 = 9;
pub const SO_OOBINLINE: u32 = 10;
pub const SO_NO_CHECK: u32 = 11;
pub const SO_PRIORITY: u32 = 12;
pub const SO_LINGER: u32 = 13;
pub const SO_BSDCOMPAT: u32 = 14;
pub const SO_REUSEPORT: u32 = 15;
pub const SO_PASSCRED: u32 = 16;
pub const SO_PEERCRED: u32 = 17;
pub const SO_RCVLOWAT: u32 = 18;
pub const SO_SNDLOWAT: u32 = 19;
pub const SO_RCVTIMEO: u32 = 20;
pub const SO_SNDTIMEO: u32 = 21;
pub const SO_SECURITY_AUTHENTICATION: u32 = 22;
pub const SO_SECURITY_ENCRYPTION_TRANSPORT: u32 = 23;
pub const SO_SECURITY_ENCRYPTION_NETWORK: u32 = 24;
pub const SO_BINDTODEVICE: u32 = 25;
pub const SO_ATTACH_FILTER: u32 = 26;
pub const SO_DETACH_FILTER: u32 = 27;
pub const SO_GET_FILTER: u32 = 26;
pub const SO_PEERNAME: u32 = 28;
pub const SO_TIMESTAMP: u32 = 29;
pub const SCM_TIMESTAMP: u32 = 29;
pub const SO_ACCEPTCONN: u32 = 30;
pub const SO_PEERSEC: u32 = 31;
pub const SO_PASSSEC: u32 = 34;
pub const SO_TIMESTAMPNS: u32 = 35;
pub const SCM_TIMESTAMPNS: u32 = 35;
pub const SO_MARK: u32 = 36;
pub const SO_TIMESTAMPING: u32 = 37;
pub const SCM_TIMESTAMPING: u32 = 37;
pub const SO_PROTOCOL: u32 = 38;
pub const SO_DOMAIN: u32 = 39;
pub const SO_RXQ_OVFL: u32 = 40;
pub const SO_WIFI_STATUS: u32 = 41;
pub const SCM_WIFI_STATUS: u32 = 41;
pub const SO_PEEK_OFF: u32 = 42;
pub const SO_NOFCS: u32 = 43;
pub const SO_LOCK_FILTER: u32 = 44;
pub const SO_SELECT_ERR_QUEUE: u32 = 45;
pub const SO_BUSY_POLL: u32 = 46;
pub const SO_MAX_PACING_RATE: u32 = 47;
pub const SO_BPF_EXTENSIONS: u32 = 48;
pub const SO_INCOMING_CPU: u32 = 49;
pub const SO_ATTACH_BPF: u32 = 50;
pub const SO_DETACH_BPF: u32 = 27;
pub const PATH_MAX: u32 = 4096;
pub const WEECHAT_PLUGIN_API_VERSION: &'static [u8; 12usize] = b"20190810-01\0";
pub const WEECHAT_RC_OK: u32 = 0;
pub const WEECHAT_RC_OK_EAT: u32 = 1;
pub const WEECHAT_RC_ERROR: i32 = -1;
pub const WEECHAT_STRING_SPLIT_STRIP_LEFT: u32 = 1;
pub const WEECHAT_STRING_SPLIT_STRIP_RIGHT: u32 = 2;
pub const WEECHAT_STRING_SPLIT_COLLAPSE_SEPS: u32 = 4;
pub const WEECHAT_STRING_SPLIT_KEEP_EOL: u32 = 8;
pub const WEECHAT_CONFIG_READ_OK: u32 = 0;
pub const WEECHAT_CONFIG_READ_MEMORY_ERROR: i32 = -1;
pub const WEECHAT_CONFIG_READ_FILE_NOT_FOUND: i32 = -2;
pub const WEECHAT_CONFIG_WRITE_OK: u32 = 0;
pub const WEECHAT_CONFIG_WRITE_ERROR: i32 = -1;
pub const WEECHAT_CONFIG_WRITE_MEMORY_ERROR: i32 = -2;
pub const WEECHAT_CONFIG_OPTION_NULL: &'static [u8; 5usize] = b"null\0";
pub const WEECHAT_CONFIG_OPTION_SET_OK_CHANGED: u32 = 2;
pub const WEECHAT_CONFIG_OPTION_SET_OK_SAME_VALUE: u32 = 1;
pub const WEECHAT_CONFIG_OPTION_SET_ERROR: u32 = 0;
pub const WEECHAT_CONFIG_OPTION_SET_OPTION_NOT_FOUND: i32 = -1;
pub const WEECHAT_CONFIG_OPTION_UNSET_OK_NO_RESET: u32 = 0;
pub const WEECHAT_CONFIG_OPTION_UNSET_OK_RESET: u32 = 1;
pub const WEECHAT_CONFIG_OPTION_UNSET_OK_REMOVED: u32 = 2;
pub const WEECHAT_CONFIG_OPTION_UNSET_ERROR: i32 = -1;
pub const WEECHAT_LIST_POS_SORT: &'static [u8; 5usize] = b"sort\0";
pub const WEECHAT_LIST_POS_BEGINNING: &'static [u8; 10usize] = b"beginning\0";
pub const WEECHAT_LIST_POS_END: &'static [u8; 4usize] = b"end\0";
pub const WEECHAT_HASHTABLE_INTEGER: &'static [u8; 8usize] = b"integer\0";
pub const WEECHAT_HASHTABLE_STRING: &'static [u8; 7usize] = b"string\0";
pub const WEECHAT_HASHTABLE_POINTER: &'static [u8; 8usize] = b"pointer\0";
pub const WEECHAT_HASHTABLE_BUFFER: &'static [u8; 7usize] = b"buffer\0";
pub const WEECHAT_HASHTABLE_TIME: &'static [u8; 5usize] = b"time\0";
pub const WEECHAT_HDATA_OTHER: u32 = 0;
pub const WEECHAT_HDATA_CHAR: u32 = 1;
pub const WEECHAT_HDATA_INTEGER: u32 = 2;
pub const WEECHAT_HDATA_LONG: u32 = 3;
pub const WEECHAT_HDATA_STRING: u32 = 4;
pub const WEECHAT_HDATA_POINTER: u32 = 5;
pub const WEECHAT_HDATA_TIME: u32 = 6;
pub const WEECHAT_HDATA_HASHTABLE: u32 = 7;
pub const WEECHAT_HDATA_SHARED_STRING: u32 = 8;
pub const WEECHAT_HDATA_LIST_CHECK_POINTERS: u32 = 1;
pub const WEECHAT_HOTLIST_LOW: &'static [u8; 2usize] = b"0\0";
pub const WEECHAT_HOTLIST_MESSAGE: &'static [u8; 2usize] = b"1\0";
pub const WEECHAT_HOTLIST_PRIVATE: &'static [u8; 2usize] = b"2\0";
pub const WEECHAT_HOTLIST_HIGHLIGHT: &'static [u8; 2usize] = b"3\0";
pub const WEECHAT_HOOK_PROCESS_RUNNING: i32 = -1;
pub const WEECHAT_HOOK_PROCESS_ERROR: i32 = -2;
pub const WEECHAT_HOOK_PROCESS_CHILD: i32 = -3;
pub const WEECHAT_HOOK_CONNECT_OK: u32 = 0;
pub const WEECHAT_HOOK_CONNECT_ADDRESS_NOT_FOUND: u32 = 1;
pub const WEECHAT_HOOK_CONNECT_IP_ADDRESS_NOT_FOUND: u32 = 2;
pub const WEECHAT_HOOK_CONNECT_CONNECTION_REFUSED: u32 = 3;
pub const WEECHAT_HOOK_CONNECT_PROXY_ERROR: u32 = 4;
pub const WEECHAT_HOOK_CONNECT_LOCAL_HOSTNAME_ERROR: u32 = 5;
pub const WEECHAT_HOOK_CONNECT_GNUTLS_INIT_ERROR: u32 = 6;
pub const WEECHAT_HOOK_CONNECT_GNUTLS_HANDSHAKE_ERROR: u32 = 7;
pub const WEECHAT_HOOK_CONNECT_MEMORY_ERROR: u32 = 8;
pub const WEECHAT_HOOK_CONNECT_TIMEOUT: u32 = 9;
pub const WEECHAT_HOOK_CONNECT_SOCKET_ERROR: u32 = 10;
pub const WEECHAT_HOOK_CONNECT_GNUTLS_CB_VERIFY_CERT: u32 = 0;
pub const WEECHAT_HOOK_CONNECT_GNUTLS_CB_SET_CERT: u32 = 1;
pub const WEECHAT_HOOK_SIGNAL_STRING: &'static [u8; 7usize] = b"string\0";
pub const WEECHAT_HOOK_SIGNAL_INT: &'static [u8; 4usize] = b"int\0";
pub const WEECHAT_HOOK_SIGNAL_POINTER: &'static [u8; 8usize] = b"pointer\0";
pub type wchar_t = ::std::os::raw::c_int;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        56usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        8usize,
        concat!("Alignment of ", stringify!(tm))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    assert_eq!(
        ::std::mem::size_of::<itimerspec>(),
        32usize,
        concat!("Size of: ", stringify!(itimerspec))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerspec>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerspec))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent {
    _unused: [u8; 0],
}
pub type pid_t = __pid_t;
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
    ) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strftime_l(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
        __loc: __locale_t,
    ) -> usize;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_r(
        __tp: *const tm,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn stime(__when: *const time_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gnu_dev_major(__dev: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_minor(__dev: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_makedev(
        __major: ::std::os::raw::c_uint,
        __minor: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulonglong;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: pthread_mutex_t___pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 5usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_mutex_t___pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t___pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t___pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t___pthread_mutex_s>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(pthread_mutex_t___pthread_mutex_s)
        )
    );
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: pthread_cond_t__bindgen_ty_1,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_cond_t__bindgen_ty_1 {
    pub __lock: ::std::os::raw::c_int,
    pub __futex: ::std::os::raw::c_uint,
    pub __total_seq: ::std::os::raw::c_ulonglong,
    pub __wakeup_seq: ::std::os::raw::c_ulonglong,
    pub __woken_seq: ::std::os::raw::c_ulonglong,
    pub __mutex: *mut ::std::os::raw::c_void,
    pub __nwaiters: ::std::os::raw::c_uint,
    pub __broadcast_seq: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pthread_cond_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t__bindgen_ty_1>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t__bindgen_ty_1))
    );
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: pthread_rwlock_t__bindgen_ty_1,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_rwlock_t__bindgen_ty_1 {
    pub __lock: ::std::os::raw::c_int,
    pub __nr_readers: ::std::os::raw::c_uint,
    pub __readers_wakeup: ::std::os::raw::c_uint,
    pub __writer_wakeup: ::std::os::raw::c_uint,
    pub __nr_readers_queued: ::std::os::raw::c_uint,
    pub __nr_writers_queued: ::std::os::raw::c_uint,
    pub __writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t__bindgen_ty_1>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t__bindgen_ty_1))
    );
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: usize,
}
#[test]
fn bindgen_test_layout_iovec() {
    assert_eq!(
        ::std::mem::size_of::<iovec>(),
        16usize,
        concat!("Size of: ", stringify!(iovec))
    );
    assert_eq!(
        ::std::mem::align_of::<iovec>(),
        8usize,
        concat!("Alignment of ", stringify!(iovec))
    );
}
extern "C" {
    pub fn readv(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn writev(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn preadv(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
        __offset: __off_t,
    ) -> isize;
}
extern "C" {
    pub fn pwritev(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
        __offset: __off_t,
    ) -> isize;
}
pub type socklen_t = __socklen_t;
pub const __socket_type_SOCK_STREAM: __socket_type = 1;
pub const __socket_type_SOCK_DGRAM: __socket_type = 2;
pub const __socket_type_SOCK_RAW: __socket_type = 3;
pub const __socket_type_SOCK_RDM: __socket_type = 4;
pub const __socket_type_SOCK_SEQPACKET: __socket_type = 5;
pub const __socket_type_SOCK_DCCP: __socket_type = 6;
pub const __socket_type_SOCK_PACKET: __socket_type = 10;
pub const __socket_type_SOCK_CLOEXEC: __socket_type = 524288;
pub const __socket_type_SOCK_NONBLOCK: __socket_type = 2048;
pub type __socket_type = u32;
pub type sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[test]
fn bindgen_test_layout_sockaddr() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(sockaddr))
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_padding: [::std::os::raw::c_char; 118usize],
    pub __ss_align: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_sockaddr_storage() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_storage>(),
        128usize,
        concat!("Size of: ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_storage>(),
        8usize,
        concat!("Alignment of ", stringify!(sockaddr_storage))
    );
}
pub const MSG_OOB: _bindgen_ty_1 = 1;
pub const MSG_PEEK: _bindgen_ty_1 = 2;
pub const MSG_DONTROUTE: _bindgen_ty_1 = 4;
pub const MSG_CTRUNC: _bindgen_ty_1 = 8;
pub const MSG_PROXY: _bindgen_ty_1 = 16;
pub const MSG_TRUNC: _bindgen_ty_1 = 32;
pub const MSG_DONTWAIT: _bindgen_ty_1 = 64;
pub const MSG_EOR: _bindgen_ty_1 = 128;
pub const MSG_WAITALL: _bindgen_ty_1 = 256;
pub const MSG_FIN: _bindgen_ty_1 = 512;
pub const MSG_SYN: _bindgen_ty_1 = 1024;
pub const MSG_CONFIRM: _bindgen_ty_1 = 2048;
pub const MSG_RST: _bindgen_ty_1 = 4096;
pub const MSG_ERRQUEUE: _bindgen_ty_1 = 8192;
pub const MSG_NOSIGNAL: _bindgen_ty_1 = 16384;
pub const MSG_MORE: _bindgen_ty_1 = 32768;
pub const MSG_WAITFORONE: _bindgen_ty_1 = 65536;
pub const MSG_FASTOPEN: _bindgen_ty_1 = 536870912;
pub const MSG_CMSG_CLOEXEC: _bindgen_ty_1 = 1073741824;
pub type _bindgen_ty_1 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: usize,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: usize,
    pub msg_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_msghdr() {
    assert_eq!(
        ::std::mem::size_of::<msghdr>(),
        56usize,
        concat!("Size of: ", stringify!(msghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<msghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(msghdr))
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct cmsghdr {
    pub cmsg_len: usize,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
    pub __cmsg_data: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[test]
fn bindgen_test_layout_cmsghdr() {
    assert_eq!(
        ::std::mem::size_of::<cmsghdr>(),
        16usize,
        concat!("Size of: ", stringify!(cmsghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsghdr))
    );
}
extern "C" {
    pub fn __cmsg_nxthdr(__mhdr: *mut msghdr, __cmsg: *mut cmsghdr) -> *mut cmsghdr;
}
pub const SCM_RIGHTS: _bindgen_ty_2 = 1;
pub type _bindgen_ty_2 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_linger() {
    assert_eq!(
        ::std::mem::size_of::<linger>(),
        8usize,
        concat!("Size of: ", stringify!(linger))
    );
    assert_eq!(
        ::std::mem::align_of::<linger>(),
        4usize,
        concat!("Alignment of ", stringify!(linger))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct osockaddr {
    pub sa_family: ::std::os::raw::c_ushort,
    pub sa_data: [::std::os::raw::c_uchar; 14usize],
}
#[test]
fn bindgen_test_layout_osockaddr() {
    assert_eq!(
        ::std::mem::size_of::<osockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(osockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<osockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(osockaddr))
    );
}
pub const SHUT_RD: _bindgen_ty_3 = 0;
pub const SHUT_WR: _bindgen_ty_3 = 1;
pub const SHUT_RDWR: _bindgen_ty_3 = 2;
pub type _bindgen_ty_3 = u32;
extern "C" {
    pub fn socket(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn socketpair(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
        __fds: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bind(
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsockname(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn connect(
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpeername(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn send(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn recv(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn sendto(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __addr_len: socklen_t,
    ) -> isize;
}
extern "C" {
    pub fn recvfrom(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> isize;
}
extern "C" {
    pub fn sendmsg(
        __fd: ::std::os::raw::c_int,
        __message: *const msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn recvmsg(
        __fd: ::std::os::raw::c_int,
        __message: *mut msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn getsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *mut ::std::os::raw::c_void,
        __optlen: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *const ::std::os::raw::c_void,
        __optlen: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn listen(__fd: ::std::os::raw::c_int, __n: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn accept(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shutdown(
        __fd: ::std::os::raw::c_int,
        __how: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sockatmark(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isfdtype(
        __fd: ::std::os::raw::c_int,
        __fdtype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_config_option {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_config_section {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_config_file {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_gui_window {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_gui_buffer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_gui_bar {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_gui_bar_item {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_gui_bar_window {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_gui_completion {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_gui_nick {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_gui_nick_group {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_infolist {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_infolist_item {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_upgrade_file {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_weelist {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_weelist_item {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_arraylist {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_hashtable {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_hdata {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct t_weechat_plugin {
    pub filename: *mut ::std::os::raw::c_char,
    pub handle: *mut ::std::os::raw::c_void,
    pub name: *mut ::std::os::raw::c_char,
    pub description: *mut ::std::os::raw::c_char,
    pub author: *mut ::std::os::raw::c_char,
    pub version: *mut ::std::os::raw::c_char,
    pub license: *mut ::std::os::raw::c_char,
    pub charset: *mut ::std::os::raw::c_char,
    pub priority: ::std::os::raw::c_int,
    pub initialized: ::std::os::raw::c_int,
    pub debug: ::std::os::raw::c_int,
    pub upgrading: ::std::os::raw::c_int,
    pub variables: *mut t_hashtable,
    pub prev_plugin: *mut t_weechat_plugin,
    pub next_plugin: *mut t_weechat_plugin,
    pub plugin_get_name: ::std::option::Option<
        unsafe extern "C" fn(plugin: *mut t_weechat_plugin) -> *const ::std::os::raw::c_char,
    >,
    pub charset_set: ::std::option::Option<
        unsafe extern "C" fn(plugin: *mut t_weechat_plugin, charset: *const ::std::os::raw::c_char),
    >,
    pub iconv_to_internal: ::std::option::Option<
        unsafe extern "C" fn(
            charset: *const ::std::os::raw::c_char,
            string: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub iconv_from_internal: ::std::option::Option<
        unsafe extern "C" fn(
            charset: *const ::std::os::raw::c_char,
            string: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub gettext: ::std::option::Option<
        unsafe extern "C" fn(
            string: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub ngettext: ::std::option::Option<
        unsafe extern "C" fn(
            single: *const ::std::os::raw::c_char,
            plural: *const ::std::os::raw::c_char,
            count: ::std::os::raw::c_int,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub strndup: ::std::option::Option<
        unsafe extern "C" fn(
            string: *const ::std::os::raw::c_char,
            length: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub string_tolower:
        ::std::option::Option<unsafe extern "C" fn(string: *mut ::std::os::raw::c_char)>,
    pub string_toupper:
        ::std::option::Option<unsafe extern "C" fn(string: *mut ::std::os::raw::c_char)>,
    pub strcasecmp: ::std::option::Option<
        unsafe extern "C" fn(
            string1: *const ::std::os::raw::c_char,
            string2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub strcasecmp_range: ::std::option::Option<
        unsafe extern "C" fn(
            string1: *const ::std::os::raw::c_char,
            string2: *const ::std::os::raw::c_char,
            range: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub strncasecmp: ::std::option::Option<
        unsafe extern "C" fn(
            string1: *const ::std::os::raw::c_char,
            string2: *const ::std::os::raw::c_char,
            max: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub strncasecmp_range: ::std::option::Option<
        unsafe extern "C" fn(
            string1: *const ::std::os::raw::c_char,
            string2: *const ::std::os::raw::c_char,
            max: ::std::os::raw::c_int,
            range: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub strcmp_ignore_chars: ::std::option::Option<
        unsafe extern "C" fn(
            string1: *const ::std::os::raw::c_char,
            string2: *const ::std::os::raw::c_char,
            chars_ignored: *const ::std::os::raw::c_char,
            case_sensitive: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub strcasestr: ::std::option::Option<
        unsafe extern "C" fn(
            string: *const ::std::os::raw::c_char,
            search: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub strlen_screen: ::std::option::Option<
        unsafe extern "C" fn(string: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
    pub string_match: ::std::option::Option<
        unsafe extern "C" fn(
            string: *const ::std::os::raw::c_char,
            mask: *const ::std::os::raw::c_char,
            case_sensitive: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub string_match_list: ::std::option::Option<
        unsafe extern "C" fn(
            string: *const ::std::os::raw::c_char,
            masks: *mut *const ::std::os::raw::c_char,
            case_sensitive: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub string_replace: ::std::option::Option<
        unsafe extern "C" fn(
            string: *const ::std::os::raw::c_char,
            search: *const ::std::os::raw::c_char,
            replace: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub string_expand_home: ::std::option::Option<
        unsafe extern "C" fn(path: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
    >,
    pub string_eval_path_home: ::std::option::Option<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            pointers: *mut t_hashtable,
            extra_vars: *mut t_hashtable,
            options: *mut t_hashtable,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub string_remove_quotes: ::std::option::Option<
        unsafe extern "C" fn(
            string: *const ::std::os::raw::c_char,
            quotes: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub string_strip: ::std::option::Option<
        unsafe extern "C" fn(
            string: *const ::std::os::raw::c_char,
            left: ::std::os::raw::c_int,
            right: ::std::os::raw::c_int,
            chars: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub string_convert_escaped_chars: ::std::option::Option<
        unsafe extern "C" fn(string: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
    >,
    pub string_mask_to_regex: ::std::option::Option<
        unsafe extern "C" fn(mask: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
    >,
    pub string_regex_flags: ::std::option::Option<
        unsafe extern "C" fn(
            regex: *const ::std::os::raw::c_char,
            default_flags: ::std::os::raw::c_int,
            flags: *mut ::std::os::raw::c_int,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub string_regcomp: ::std::option::Option<
        unsafe extern "C" fn(
            preg: *mut ::std::os::raw::c_void,
            regex: *const ::std::os::raw::c_char,
            default_flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub string_has_highlight: ::std::option::Option<
        unsafe extern "C" fn(
            string: *const ::std::os::raw::c_char,
            highlight_words: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub string_has_highlight_regex: ::std::option::Option<
        unsafe extern "C" fn(
            string: *const ::std::os::raw::c_char,
            regex: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub string_replace_regex: ::std::option::Option<
        unsafe extern "C" fn(
            string: *const ::std::os::raw::c_char,
            regex: *mut ::std::os::raw::c_void,
            replace: *const ::std::os::raw::c_char,
            reference_char: ::std::os::raw::c_char,
            callback: ::std::option::Option<
                unsafe extern "C" fn(
                    data: *mut ::std::os::raw::c_void,
                    text: *const ::std::os::raw::c_char,
                ) -> *mut ::std::os::raw::c_char,
            >,
            callback_data: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub string_split: ::std::option::Option<
        unsafe extern "C" fn(
            string: *const ::std::os::raw::c_char,
            separators: *const ::std::os::raw::c_char,
            strip_items: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
            num_items_max: ::std::os::raw::c_int,
            num_items: *mut ::std::os::raw::c_int,
        ) -> *mut *mut ::std::os::raw::c_char,
    >,
    pub string_split_shell: ::std::option::Option<
        unsafe extern "C" fn(
            string: *const ::std::os::raw::c_char,
            num_items: *mut ::std::os::raw::c_int,
        ) -> *mut *mut ::std::os::raw::c_char,
    >,
    pub string_free_split:
        ::std::option::Option<unsafe extern "C" fn(split_string: *mut *mut ::std::os::raw::c_char)>,
    pub string_build_with_split_string: ::std::option::Option<
        unsafe extern "C" fn(
            split_string: *mut *const ::std::os::raw::c_char,
            separator: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub string_split_command: ::std::option::Option<
        unsafe extern "C" fn(
            command: *const ::std::os::raw::c_char,
            separator: ::std::os::raw::c_char,
        ) -> *mut *mut ::std::os::raw::c_char,
    >,
    pub string_free_split_command: ::std::option::Option<
        unsafe extern "C" fn(split_command: *mut *mut ::std::os::raw::c_char),
    >,
    pub string_format_size: ::std::option::Option<
        unsafe extern "C" fn(size: ::std::os::raw::c_ulonglong) -> *mut ::std::os::raw::c_char,
    >,
    pub string_remove_color: ::std::option::Option<
        unsafe extern "C" fn(
            string: *const ::std::os::raw::c_char,
            replacement: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub string_base_encode: ::std::option::Option<
        unsafe extern "C" fn(
            base: ::std::os::raw::c_int,
            from: *const ::std::os::raw::c_char,
            length: ::std::os::raw::c_int,
            to: *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub string_base_decode: ::std::option::Option<
        unsafe extern "C" fn(
            base: ::std::os::raw::c_int,
            from: *const ::std::os::raw::c_char,
            to: *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub string_hex_dump: ::std::option::Option<
        unsafe extern "C" fn(
            data: *const ::std::os::raw::c_char,
            data_size: ::std::os::raw::c_int,
            bytes_per_line: ::std::os::raw::c_int,
            prefix: *const ::std::os::raw::c_char,
            suffix: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub string_is_command_char: ::std::option::Option<
        unsafe extern "C" fn(string: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
    pub string_input_for_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            string: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub string_eval_expression: ::std::option::Option<
        unsafe extern "C" fn(
            expr: *const ::std::os::raw::c_char,
            pointers: *mut t_hashtable,
            extra_vars: *mut t_hashtable,
            options: *mut t_hashtable,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub string_dyn_alloc: ::std::option::Option<
        unsafe extern "C" fn(size_alloc: ::std::os::raw::c_int) -> *mut *mut ::std::os::raw::c_char,
    >,
    pub string_dyn_copy: ::std::option::Option<
        unsafe extern "C" fn(
            string: *mut *mut ::std::os::raw::c_char,
            new_string: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub string_dyn_concat: ::std::option::Option<
        unsafe extern "C" fn(
            string: *mut *mut ::std::os::raw::c_char,
            add: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub string_dyn_free: ::std::option::Option<
        unsafe extern "C" fn(
            string: *mut *mut ::std::os::raw::c_char,
            free_string: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub utf8_has_8bits: ::std::option::Option<
        unsafe extern "C" fn(string: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
    pub utf8_is_valid: ::std::option::Option<
        unsafe extern "C" fn(
            string: *const ::std::os::raw::c_char,
            length: ::std::os::raw::c_int,
            error: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub utf8_normalize: ::std::option::Option<
        unsafe extern "C" fn(
            string: *mut ::std::os::raw::c_char,
            replacement: ::std::os::raw::c_char,
        ),
    >,
    pub utf8_prev_char: ::std::option::Option<
        unsafe extern "C" fn(
            string_start: *const ::std::os::raw::c_char,
            string: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub utf8_next_char: ::std::option::Option<
        unsafe extern "C" fn(
            string: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub utf8_char_int: ::std::option::Option<
        unsafe extern "C" fn(string: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
    pub utf8_char_size: ::std::option::Option<
        unsafe extern "C" fn(string: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
    pub utf8_strlen: ::std::option::Option<
        unsafe extern "C" fn(string: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
    pub utf8_strnlen: ::std::option::Option<
        unsafe extern "C" fn(
            string: *const ::std::os::raw::c_char,
            bytes: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub utf8_strlen_screen: ::std::option::Option<
        unsafe extern "C" fn(string: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
    pub utf8_charcmp: ::std::option::Option<
        unsafe extern "C" fn(
            string1: *const ::std::os::raw::c_char,
            string2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub utf8_charcasecmp: ::std::option::Option<
        unsafe extern "C" fn(
            string1: *const ::std::os::raw::c_char,
            string2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub utf8_char_size_screen: ::std::option::Option<
        unsafe extern "C" fn(string: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
    pub utf8_add_offset: ::std::option::Option<
        unsafe extern "C" fn(
            string: *const ::std::os::raw::c_char,
            offset: ::std::os::raw::c_int,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub utf8_real_pos: ::std::option::Option<
        unsafe extern "C" fn(
            string: *const ::std::os::raw::c_char,
            pos: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub utf8_pos: ::std::option::Option<
        unsafe extern "C" fn(
            string: *const ::std::os::raw::c_char,
            real_pos: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub utf8_strndup: ::std::option::Option<
        unsafe extern "C" fn(
            string: *const ::std::os::raw::c_char,
            length: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub mkdir_home: ::std::option::Option<
        unsafe extern "C" fn(
            directory: *const ::std::os::raw::c_char,
            mode: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub mkdir: ::std::option::Option<
        unsafe extern "C" fn(
            directory: *const ::std::os::raw::c_char,
            mode: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub mkdir_parents: ::std::option::Option<
        unsafe extern "C" fn(
            directory: *const ::std::os::raw::c_char,
            mode: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub exec_on_files: ::std::option::Option<
        unsafe extern "C" fn(
            directory: *const ::std::os::raw::c_char,
            recurse_subdirs: ::std::os::raw::c_int,
            hidden_files: ::std::os::raw::c_int,
            callback: ::std::option::Option<
                unsafe extern "C" fn(
                    data: *mut ::std::os::raw::c_void,
                    filename: *const ::std::os::raw::c_char,
                ),
            >,
            callback_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub file_get_content: ::std::option::Option<
        unsafe extern "C" fn(
            filename: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub util_timeval_cmp: ::std::option::Option<
        unsafe extern "C" fn(tv1: *mut timeval, tv2: *mut timeval) -> ::std::os::raw::c_int,
    >,
    pub util_timeval_diff: ::std::option::Option<
        unsafe extern "C" fn(tv1: *mut timeval, tv2: *mut timeval) -> ::std::os::raw::c_longlong,
    >,
    pub util_timeval_add: ::std::option::Option<
        unsafe extern "C" fn(tv: *mut timeval, interval: ::std::os::raw::c_longlong),
    >,
    pub util_get_time_string: ::std::option::Option<
        unsafe extern "C" fn(date: *const time_t) -> *const ::std::os::raw::c_char,
    >,
    pub util_version_number: ::std::option::Option<
        unsafe extern "C" fn(version: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
    pub list_new: ::std::option::Option<unsafe extern "C" fn() -> *mut t_weelist>,
    pub list_add: ::std::option::Option<
        unsafe extern "C" fn(
            weelist: *mut t_weelist,
            data: *const ::std::os::raw::c_char,
            where_: *const ::std::os::raw::c_char,
            user_data: *mut ::std::os::raw::c_void,
        ) -> *mut t_weelist_item,
    >,
    pub list_search: ::std::option::Option<
        unsafe extern "C" fn(
            weelist: *mut t_weelist,
            data: *const ::std::os::raw::c_char,
        ) -> *mut t_weelist_item,
    >,
    pub list_search_pos: ::std::option::Option<
        unsafe extern "C" fn(
            weelist: *mut t_weelist,
            data: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub list_casesearch: ::std::option::Option<
        unsafe extern "C" fn(
            weelist: *mut t_weelist,
            data: *const ::std::os::raw::c_char,
        ) -> *mut t_weelist_item,
    >,
    pub list_casesearch_pos: ::std::option::Option<
        unsafe extern "C" fn(
            weelist: *mut t_weelist,
            data: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub list_get: ::std::option::Option<
        unsafe extern "C" fn(
            weelist: *mut t_weelist,
            position: ::std::os::raw::c_int,
        ) -> *mut t_weelist_item,
    >,
    pub list_set: ::std::option::Option<
        unsafe extern "C" fn(item: *mut t_weelist_item, value: *const ::std::os::raw::c_char),
    >,
    pub list_next: ::std::option::Option<
        unsafe extern "C" fn(item: *mut t_weelist_item) -> *mut t_weelist_item,
    >,
    pub list_prev: ::std::option::Option<
        unsafe extern "C" fn(item: *mut t_weelist_item) -> *mut t_weelist_item,
    >,
    pub list_string: ::std::option::Option<
        unsafe extern "C" fn(item: *mut t_weelist_item) -> *const ::std::os::raw::c_char,
    >,
    pub list_user_data: ::std::option::Option<
        unsafe extern "C" fn(item: *mut t_weelist_item) -> *mut ::std::os::raw::c_void,
    >,
    pub list_size: ::std::option::Option<
        unsafe extern "C" fn(weelist: *mut t_weelist) -> ::std::os::raw::c_int,
    >,
    pub list_remove: ::std::option::Option<
        unsafe extern "C" fn(weelist: *mut t_weelist, item: *mut t_weelist_item),
    >,
    pub list_remove_all: ::std::option::Option<unsafe extern "C" fn(weelist: *mut t_weelist)>,
    pub list_free: ::std::option::Option<unsafe extern "C" fn(weelist: *mut t_weelist)>,
    pub arraylist_new: ::std::option::Option<
        unsafe extern "C" fn(
            initial_size: ::std::os::raw::c_int,
            sorted: ::std::os::raw::c_int,
            allow_duplicates: ::std::os::raw::c_int,
            callback_cmp: ::std::option::Option<
                unsafe extern "C" fn(
                    data: *mut ::std::os::raw::c_void,
                    arraylist: *mut t_arraylist,
                    pointer1: *mut ::std::os::raw::c_void,
                    pointer2: *mut ::std::os::raw::c_void,
                ) -> ::std::os::raw::c_int,
            >,
            callback_cmp_data: *mut ::std::os::raw::c_void,
            callback_free: ::std::option::Option<
                unsafe extern "C" fn(
                    data: *mut ::std::os::raw::c_void,
                    arraylist: *mut t_arraylist,
                    pointer: *mut ::std::os::raw::c_void,
                ),
            >,
            callback_free_data: *mut ::std::os::raw::c_void,
        ) -> *mut t_arraylist,
    >,
    pub arraylist_size: ::std::option::Option<
        unsafe extern "C" fn(arraylist: *mut t_arraylist) -> ::std::os::raw::c_int,
    >,
    pub arraylist_get: ::std::option::Option<
        unsafe extern "C" fn(
            arraylist: *mut t_arraylist,
            index: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub arraylist_search: ::std::option::Option<
        unsafe extern "C" fn(
            arraylist: *mut t_arraylist,
            pointer: *mut ::std::os::raw::c_void,
            index: *mut ::std::os::raw::c_int,
            index_insert: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub arraylist_insert: ::std::option::Option<
        unsafe extern "C" fn(
            arraylist: *mut t_arraylist,
            index: ::std::os::raw::c_int,
            pointer: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub arraylist_add: ::std::option::Option<
        unsafe extern "C" fn(
            arraylist: *mut t_arraylist,
            pointer: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub arraylist_remove: ::std::option::Option<
        unsafe extern "C" fn(
            arraylist: *mut t_arraylist,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub arraylist_clear: ::std::option::Option<
        unsafe extern "C" fn(arraylist: *mut t_arraylist) -> ::std::os::raw::c_int,
    >,
    pub arraylist_free: ::std::option::Option<unsafe extern "C" fn(arraylist: *mut t_arraylist)>,
    pub hashtable_new: ::std::option::Option<
        unsafe extern "C" fn(
            size: ::std::os::raw::c_int,
            type_keys: *const ::std::os::raw::c_char,
            type_values: *const ::std::os::raw::c_char,
            callback_hash_key: ::std::option::Option<
                unsafe extern "C" fn(
                    hashtable: *mut t_hashtable,
                    key: *const ::std::os::raw::c_void,
                ) -> ::std::os::raw::c_ulonglong,
            >,
            callback_keycmp: ::std::option::Option<
                unsafe extern "C" fn(
                    hashtable: *mut t_hashtable,
                    key1: *const ::std::os::raw::c_void,
                    key2: *const ::std::os::raw::c_void,
                ) -> ::std::os::raw::c_int,
            >,
        ) -> *mut t_hashtable,
    >,
    pub hashtable_set_with_size: ::std::option::Option<
        unsafe extern "C" fn(
            hashtable: *mut t_hashtable,
            key: *const ::std::os::raw::c_void,
            key_size: ::std::os::raw::c_int,
            value: *const ::std::os::raw::c_void,
            value_size: ::std::os::raw::c_int,
        ) -> *mut t_hashtable_item,
    >,
    pub hashtable_set: ::std::option::Option<
        unsafe extern "C" fn(
            hashtable: *mut t_hashtable,
            key: *const ::std::os::raw::c_void,
            value: *const ::std::os::raw::c_void,
        ) -> *mut t_hashtable_item,
    >,
    pub hashtable_get: ::std::option::Option<
        unsafe extern "C" fn(
            hashtable: *mut t_hashtable,
            key: *const ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub hashtable_has_key: ::std::option::Option<
        unsafe extern "C" fn(
            hashtable: *mut t_hashtable,
            key: *const ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub hashtable_map: ::std::option::Option<
        unsafe extern "C" fn(
            hashtable: *mut t_hashtable,
            callback_map: ::std::option::Option<
                unsafe extern "C" fn(
                    data: *mut ::std::os::raw::c_void,
                    hashtable: *mut t_hashtable,
                    key: *const ::std::os::raw::c_void,
                    value: *const ::std::os::raw::c_void,
                ),
            >,
            callback_map_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub hashtable_map_string: ::std::option::Option<
        unsafe extern "C" fn(
            hashtable: *mut t_hashtable,
            callback_map: ::std::option::Option<
                unsafe extern "C" fn(
                    data: *mut ::std::os::raw::c_void,
                    hashtable: *mut t_hashtable,
                    key: *const ::std::os::raw::c_char,
                    value: *const ::std::os::raw::c_char,
                ),
            >,
            callback_map_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub hashtable_dup: ::std::option::Option<
        unsafe extern "C" fn(hashtable: *mut t_hashtable) -> *mut t_hashtable,
    >,
    pub hashtable_get_integer: ::std::option::Option<
        unsafe extern "C" fn(
            hashtable: *mut t_hashtable,
            property: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub hashtable_get_string: ::std::option::Option<
        unsafe extern "C" fn(
            hashtable: *mut t_hashtable,
            property: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub hashtable_set_pointer: ::std::option::Option<
        unsafe extern "C" fn(
            hashtable: *mut t_hashtable,
            property: *const ::std::os::raw::c_char,
            pointer: *mut ::std::os::raw::c_void,
        ),
    >,
    pub hashtable_add_to_infolist: ::std::option::Option<
        unsafe extern "C" fn(
            hashtable: *mut t_hashtable,
            infolist_item: *mut t_infolist_item,
            prefix: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub hashtable_add_from_infolist: ::std::option::Option<
        unsafe extern "C" fn(
            hashtable: *mut t_hashtable,
            infolist: *mut t_infolist,
            prefix: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub hashtable_remove: ::std::option::Option<
        unsafe extern "C" fn(hashtable: *mut t_hashtable, key: *const ::std::os::raw::c_void),
    >,
    pub hashtable_remove_all:
        ::std::option::Option<unsafe extern "C" fn(hashtable: *mut t_hashtable)>,
    pub hashtable_free: ::std::option::Option<unsafe extern "C" fn(hashtable: *mut t_hashtable)>,
    pub config_new: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            name: *const ::std::os::raw::c_char,
            callback_reload: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const ::std::os::raw::c_void,
                    data: *mut ::std::os::raw::c_void,
                    config_file: *mut t_config_file,
                ) -> ::std::os::raw::c_int,
            >,
            callback_reload_pointer: *const ::std::os::raw::c_void,
            callback_reload_data: *mut ::std::os::raw::c_void,
        ) -> *mut t_config_file,
    >,
    pub config_new_section: ::std::option::Option<
        unsafe extern "C" fn(
            config_file: *mut t_config_file,
            name: *const ::std::os::raw::c_char,
            user_can_add_options: ::std::os::raw::c_int,
            user_can_delete_options: ::std::os::raw::c_int,
            callback_read: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const ::std::os::raw::c_void,
                    data: *mut ::std::os::raw::c_void,
                    config_file: *mut t_config_file,
                    section: *mut t_config_section,
                    option_name: *const ::std::os::raw::c_char,
                    value: *const ::std::os::raw::c_char,
                ) -> ::std::os::raw::c_int,
            >,
            callback_read_pointer: *const ::std::os::raw::c_void,
            callback_read_data: *mut ::std::os::raw::c_void,
            callback_write: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const ::std::os::raw::c_void,
                    data: *mut ::std::os::raw::c_void,
                    config_file: *mut t_config_file,
                    section_name: *const ::std::os::raw::c_char,
                ) -> ::std::os::raw::c_int,
            >,
            callback_write_pointer: *const ::std::os::raw::c_void,
            callback_write_data: *mut ::std::os::raw::c_void,
            callback_write_default: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const ::std::os::raw::c_void,
                    data: *mut ::std::os::raw::c_void,
                    config_file: *mut t_config_file,
                    section_name: *const ::std::os::raw::c_char,
                ) -> ::std::os::raw::c_int,
            >,
            callback_write_default_pointer: *const ::std::os::raw::c_void,
            callback_write_default_data: *mut ::std::os::raw::c_void,
            callback_create_option: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const ::std::os::raw::c_void,
                    data: *mut ::std::os::raw::c_void,
                    config_file: *mut t_config_file,
                    section: *mut t_config_section,
                    option_name: *const ::std::os::raw::c_char,
                    value: *const ::std::os::raw::c_char,
                ) -> ::std::os::raw::c_int,
            >,
            callback_create_option_pointer: *const ::std::os::raw::c_void,
            callback_create_option_data: *mut ::std::os::raw::c_void,
            callback_delete_option: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const ::std::os::raw::c_void,
                    data: *mut ::std::os::raw::c_void,
                    config_file: *mut t_config_file,
                    section: *mut t_config_section,
                    option: *mut t_config_option,
                ) -> ::std::os::raw::c_int,
            >,
            callback_delete_option_pointer: *const ::std::os::raw::c_void,
            callback_delete_option_data: *mut ::std::os::raw::c_void,
        ) -> *mut t_config_section,
    >,
    pub config_search_section: ::std::option::Option<
        unsafe extern "C" fn(
            config_file: *mut t_config_file,
            section_name: *const ::std::os::raw::c_char,
        ) -> *mut t_config_section,
    >,
    pub config_new_option: ::std::option::Option<
        unsafe extern "C" fn(
            config_file: *mut t_config_file,
            section: *mut t_config_section,
            name: *const ::std::os::raw::c_char,
            type_: *const ::std::os::raw::c_char,
            description: *const ::std::os::raw::c_char,
            string_values: *const ::std::os::raw::c_char,
            min: ::std::os::raw::c_int,
            max: ::std::os::raw::c_int,
            default_value: *const ::std::os::raw::c_char,
            value: *const ::std::os::raw::c_char,
            null_value_allowed: ::std::os::raw::c_int,
            callback_check_value: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const ::std::os::raw::c_void,
                    data: *mut ::std::os::raw::c_void,
                    option: *mut t_config_option,
                    value: *const ::std::os::raw::c_char,
                ) -> ::std::os::raw::c_int,
            >,
            callback_check_value_pointer: *const ::std::os::raw::c_void,
            callback_check_value_data: *mut ::std::os::raw::c_void,
            callback_change: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const ::std::os::raw::c_void,
                    data: *mut ::std::os::raw::c_void,
                    option: *mut t_config_option,
                ),
            >,
            callback_change_pointer: *const ::std::os::raw::c_void,
            callback_change_data: *mut ::std::os::raw::c_void,
            callback_delete: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const ::std::os::raw::c_void,
                    data: *mut ::std::os::raw::c_void,
                    option: *mut t_config_option,
                ),
            >,
            callback_delete_pointer: *const ::std::os::raw::c_void,
            callback_delete_data: *mut ::std::os::raw::c_void,
        ) -> *mut t_config_option,
    >,
    pub config_search_option: ::std::option::Option<
        unsafe extern "C" fn(
            config_file: *mut t_config_file,
            section: *mut t_config_section,
            option_name: *const ::std::os::raw::c_char,
        ) -> *mut t_config_option,
    >,
    pub config_search_section_option: ::std::option::Option<
        unsafe extern "C" fn(
            config_file: *mut t_config_file,
            section: *mut t_config_section,
            option_name: *const ::std::os::raw::c_char,
            section_found: *mut *mut t_config_section,
            option_found: *mut *mut t_config_option,
        ),
    >,
    pub config_search_with_string: ::std::option::Option<
        unsafe extern "C" fn(
            option_name: *const ::std::os::raw::c_char,
            config_file: *mut *mut t_config_file,
            section: *mut *mut t_config_section,
            option: *mut *mut t_config_option,
            pos_option_name: *mut *mut ::std::os::raw::c_char,
        ),
    >,
    pub config_string_to_boolean: ::std::option::Option<
        unsafe extern "C" fn(text: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
    pub config_option_reset: ::std::option::Option<
        unsafe extern "C" fn(
            option: *mut t_config_option,
            run_callback: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub config_option_set: ::std::option::Option<
        unsafe extern "C" fn(
            option: *mut t_config_option,
            value: *const ::std::os::raw::c_char,
            run_callback: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub config_option_set_null: ::std::option::Option<
        unsafe extern "C" fn(
            option: *mut t_config_option,
            run_callback: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub config_option_unset: ::std::option::Option<
        unsafe extern "C" fn(option: *mut t_config_option) -> ::std::os::raw::c_int,
    >,
    pub config_option_rename: ::std::option::Option<
        unsafe extern "C" fn(option: *mut t_config_option, new_name: *const ::std::os::raw::c_char),
    >,
    pub config_option_get_string: ::std::option::Option<
        unsafe extern "C" fn(
            option: *mut t_config_option,
            property: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub config_option_get_pointer: ::std::option::Option<
        unsafe extern "C" fn(
            option: *mut t_config_option,
            property: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub config_option_is_null: ::std::option::Option<
        unsafe extern "C" fn(option: *mut t_config_option) -> ::std::os::raw::c_int,
    >,
    pub config_option_default_is_null: ::std::option::Option<
        unsafe extern "C" fn(option: *mut t_config_option) -> ::std::os::raw::c_int,
    >,
    pub config_boolean: ::std::option::Option<
        unsafe extern "C" fn(option: *mut t_config_option) -> ::std::os::raw::c_int,
    >,
    pub config_boolean_default: ::std::option::Option<
        unsafe extern "C" fn(option: *mut t_config_option) -> ::std::os::raw::c_int,
    >,
    pub config_integer: ::std::option::Option<
        unsafe extern "C" fn(option: *mut t_config_option) -> ::std::os::raw::c_int,
    >,
    pub config_integer_default: ::std::option::Option<
        unsafe extern "C" fn(option: *mut t_config_option) -> ::std::os::raw::c_int,
    >,
    pub config_string: ::std::option::Option<
        unsafe extern "C" fn(option: *mut t_config_option) -> *const ::std::os::raw::c_char,
    >,
    pub config_string_default: ::std::option::Option<
        unsafe extern "C" fn(option: *mut t_config_option) -> *const ::std::os::raw::c_char,
    >,
    pub config_color: ::std::option::Option<
        unsafe extern "C" fn(option: *mut t_config_option) -> *const ::std::os::raw::c_char,
    >,
    pub config_color_default: ::std::option::Option<
        unsafe extern "C" fn(option: *mut t_config_option) -> *const ::std::os::raw::c_char,
    >,
    pub config_write_option: ::std::option::Option<
        unsafe extern "C" fn(
            config_file: *mut t_config_file,
            option: *mut t_config_option,
        ) -> ::std::os::raw::c_int,
    >,
    pub config_write_line: ::std::option::Option<
        unsafe extern "C" fn(
            config_file: *mut t_config_file,
            option_name: *const ::std::os::raw::c_char,
            value: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
    >,
    pub config_write: ::std::option::Option<
        unsafe extern "C" fn(config_file: *mut t_config_file) -> ::std::os::raw::c_int,
    >,
    pub config_read: ::std::option::Option<
        unsafe extern "C" fn(config_file: *mut t_config_file) -> ::std::os::raw::c_int,
    >,
    pub config_reload: ::std::option::Option<
        unsafe extern "C" fn(config_file: *mut t_config_file) -> ::std::os::raw::c_int,
    >,
    pub config_option_free:
        ::std::option::Option<unsafe extern "C" fn(option: *mut t_config_option)>,
    pub config_section_free_options:
        ::std::option::Option<unsafe extern "C" fn(section: *mut t_config_section)>,
    pub config_section_free:
        ::std::option::Option<unsafe extern "C" fn(section: *mut t_config_section)>,
    pub config_free: ::std::option::Option<unsafe extern "C" fn(config_file: *mut t_config_file)>,
    pub config_get: ::std::option::Option<
        unsafe extern "C" fn(option_name: *const ::std::os::raw::c_char) -> *mut t_config_option,
    >,
    pub config_get_plugin: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            option_name: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub config_is_set_plugin: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            option_name: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub config_set_plugin: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            option_name: *const ::std::os::raw::c_char,
            value: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub config_set_desc_plugin: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            option_name: *const ::std::os::raw::c_char,
            description: *const ::std::os::raw::c_char,
        ),
    >,
    pub config_unset_plugin: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            option_name: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub key_bind: ::std::option::Option<
        unsafe extern "C" fn(
            context: *const ::std::os::raw::c_char,
            keys: *mut t_hashtable,
        ) -> ::std::os::raw::c_int,
    >,
    pub key_unbind: ::std::option::Option<
        unsafe extern "C" fn(
            context: *const ::std::os::raw::c_char,
            key: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub prefix: ::std::option::Option<
        unsafe extern "C" fn(
            prefix: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub color: ::std::option::Option<
        unsafe extern "C" fn(
            color_name: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub printf_date_tags: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *mut t_gui_buffer,
            date: time_t,
            tags: *const ::std::os::raw::c_char,
            message: *const ::std::os::raw::c_char,
            ...
        ),
    >,
    pub printf_y: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *mut t_gui_buffer,
            y: ::std::os::raw::c_int,
            message: *const ::std::os::raw::c_char,
            ...
        ),
    >,
    pub log_printf:
        ::std::option::Option<unsafe extern "C" fn(message: *const ::std::os::raw::c_char, ...)>,
    pub hook_command: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            command: *const ::std::os::raw::c_char,
            description: *const ::std::os::raw::c_char,
            args: *const ::std::os::raw::c_char,
            args_description: *const ::std::os::raw::c_char,
            completion: *const ::std::os::raw::c_char,
            callback: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const ::std::os::raw::c_void,
                    data: *mut ::std::os::raw::c_void,
                    buffer: *mut t_gui_buffer,
                    argc: ::std::os::raw::c_int,
                    argv: *mut *mut ::std::os::raw::c_char,
                    argv_eol: *mut *mut ::std::os::raw::c_char,
                ) -> ::std::os::raw::c_int,
            >,
            callback_pointer: *const ::std::os::raw::c_void,
            callback_data: *mut ::std::os::raw::c_void,
        ) -> *mut t_hook,
    >,
    pub hook_command_run: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            command: *const ::std::os::raw::c_char,
            callback: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const ::std::os::raw::c_void,
                    data: *mut ::std::os::raw::c_void,
                    buffer: *mut t_gui_buffer,
                    command: *const ::std::os::raw::c_char,
                ) -> ::std::os::raw::c_int,
            >,
            callback_pointer: *const ::std::os::raw::c_void,
            callback_data: *mut ::std::os::raw::c_void,
        ) -> *mut t_hook,
    >,
    pub hook_timer: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            interval: ::std::os::raw::c_long,
            align_second: ::std::os::raw::c_int,
            max_calls: ::std::os::raw::c_int,
            callback: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const ::std::os::raw::c_void,
                    data: *mut ::std::os::raw::c_void,
                    remaining_calls: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >,
            callback_pointer: *const ::std::os::raw::c_void,
            callback_data: *mut ::std::os::raw::c_void,
        ) -> *mut t_hook,
    >,
    pub hook_fd: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            fd: ::std::os::raw::c_int,
            flag_read: ::std::os::raw::c_int,
            flag_write: ::std::os::raw::c_int,
            flag_exception: ::std::os::raw::c_int,
            callback: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const ::std::os::raw::c_void,
                    data: *mut ::std::os::raw::c_void,
                    fd: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >,
            callback_pointer: *const ::std::os::raw::c_void,
            callback_data: *mut ::std::os::raw::c_void,
        ) -> *mut t_hook,
    >,
    pub hook_process: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            command: *const ::std::os::raw::c_char,
            timeout: ::std::os::raw::c_int,
            callback: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const ::std::os::raw::c_void,
                    data: *mut ::std::os::raw::c_void,
                    command: *const ::std::os::raw::c_char,
                    return_code: ::std::os::raw::c_int,
                    out: *const ::std::os::raw::c_char,
                    err: *const ::std::os::raw::c_char,
                ) -> ::std::os::raw::c_int,
            >,
            callback_pointer: *const ::std::os::raw::c_void,
            callback_data: *mut ::std::os::raw::c_void,
        ) -> *mut t_hook,
    >,
    pub hook_process_hashtable: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            command: *const ::std::os::raw::c_char,
            options: *mut t_hashtable,
            timeout: ::std::os::raw::c_int,
            callback: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const ::std::os::raw::c_void,
                    data: *mut ::std::os::raw::c_void,
                    command: *const ::std::os::raw::c_char,
                    return_code: ::std::os::raw::c_int,
                    out: *const ::std::os::raw::c_char,
                    err: *const ::std::os::raw::c_char,
                ) -> ::std::os::raw::c_int,
            >,
            callback_pointer: *const ::std::os::raw::c_void,
            callback_data: *mut ::std::os::raw::c_void,
        ) -> *mut t_hook,
    >,
    pub hook_connect: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            proxy: *const ::std::os::raw::c_char,
            address: *const ::std::os::raw::c_char,
            port: ::std::os::raw::c_int,
            ipv6: ::std::os::raw::c_int,
            retry: ::std::os::raw::c_int,
            gnutls_sess: *mut ::std::os::raw::c_void,
            gnutls_cb: *mut ::std::os::raw::c_void,
            gnutls_dhkey_size: ::std::os::raw::c_int,
            gnutls_priorities: *const ::std::os::raw::c_char,
            local_hostname: *const ::std::os::raw::c_char,
            callback: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const ::std::os::raw::c_void,
                    data: *mut ::std::os::raw::c_void,
                    status: ::std::os::raw::c_int,
                    gnutls_rc: ::std::os::raw::c_int,
                    sock: ::std::os::raw::c_int,
                    error: *const ::std::os::raw::c_char,
                    ip_address: *const ::std::os::raw::c_char,
                ) -> ::std::os::raw::c_int,
            >,
            callback_pointer: *const ::std::os::raw::c_void,
            callback_data: *mut ::std::os::raw::c_void,
        ) -> *mut t_hook,
    >,
    pub hook_line: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            buffer_type: *const ::std::os::raw::c_char,
            buffer_name: *const ::std::os::raw::c_char,
            tags: *const ::std::os::raw::c_char,
            callback: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const ::std::os::raw::c_void,
                    data: *mut ::std::os::raw::c_void,
                    line: *mut t_hashtable,
                ) -> *mut t_hashtable,
            >,
            callback_pointer: *const ::std::os::raw::c_void,
            callback_data: *mut ::std::os::raw::c_void,
        ) -> *mut t_hook,
    >,
    pub hook_print: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            buffer: *mut t_gui_buffer,
            tags: *const ::std::os::raw::c_char,
            message: *const ::std::os::raw::c_char,
            strip_colors: ::std::os::raw::c_int,
            callback: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const ::std::os::raw::c_void,
                    data: *mut ::std::os::raw::c_void,
                    buffer: *mut t_gui_buffer,
                    date: time_t,
                    tags_count: ::std::os::raw::c_int,
                    tags: *mut *const ::std::os::raw::c_char,
                    displayed: ::std::os::raw::c_int,
                    highlight: ::std::os::raw::c_int,
                    prefix: *const ::std::os::raw::c_char,
                    message: *const ::std::os::raw::c_char,
                ) -> ::std::os::raw::c_int,
            >,
            callback_pointer: *const ::std::os::raw::c_void,
            callback_data: *mut ::std::os::raw::c_void,
        ) -> *mut t_hook,
    >,
    pub hook_signal: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            signal: *const ::std::os::raw::c_char,
            callback: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const ::std::os::raw::c_void,
                    data: *mut ::std::os::raw::c_void,
                    signal: *const ::std::os::raw::c_char,
                    type_data: *const ::std::os::raw::c_char,
                    signal_data: *mut ::std::os::raw::c_void,
                ) -> ::std::os::raw::c_int,
            >,
            callback_pointer: *const ::std::os::raw::c_void,
            callback_data: *mut ::std::os::raw::c_void,
        ) -> *mut t_hook,
    >,
    pub hook_signal_send: ::std::option::Option<
        unsafe extern "C" fn(
            signal: *const ::std::os::raw::c_char,
            type_data: *const ::std::os::raw::c_char,
            signal_data: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub hook_hsignal: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            signal: *const ::std::os::raw::c_char,
            callback: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const ::std::os::raw::c_void,
                    data: *mut ::std::os::raw::c_void,
                    signal: *const ::std::os::raw::c_char,
                    hashtable: *mut t_hashtable,
                ) -> ::std::os::raw::c_int,
            >,
            callback_pointer: *const ::std::os::raw::c_void,
            callback_data: *mut ::std::os::raw::c_void,
        ) -> *mut t_hook,
    >,
    pub hook_hsignal_send: ::std::option::Option<
        unsafe extern "C" fn(
            signal: *const ::std::os::raw::c_char,
            hashtable: *mut t_hashtable,
        ) -> ::std::os::raw::c_int,
    >,
    pub hook_config: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            option: *const ::std::os::raw::c_char,
            callback: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const ::std::os::raw::c_void,
                    data: *mut ::std::os::raw::c_void,
                    option: *const ::std::os::raw::c_char,
                    value: *const ::std::os::raw::c_char,
                ) -> ::std::os::raw::c_int,
            >,
            callback_pointer: *const ::std::os::raw::c_void,
            callback_data: *mut ::std::os::raw::c_void,
        ) -> *mut t_hook,
    >,
    pub hook_completion: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            completion_item: *const ::std::os::raw::c_char,
            description: *const ::std::os::raw::c_char,
            callback: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const ::std::os::raw::c_void,
                    data: *mut ::std::os::raw::c_void,
                    completion_item: *const ::std::os::raw::c_char,
                    buffer: *mut t_gui_buffer,
                    completion: *mut t_gui_completion,
                ) -> ::std::os::raw::c_int,
            >,
            callback_pointer: *const ::std::os::raw::c_void,
            callback_data: *mut ::std::os::raw::c_void,
        ) -> *mut t_hook,
    >,
    pub hook_completion_get_string: ::std::option::Option<
        unsafe extern "C" fn(
            completion: *mut t_gui_completion,
            property: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub hook_completion_list_add: ::std::option::Option<
        unsafe extern "C" fn(
            completion: *mut t_gui_completion,
            word: *const ::std::os::raw::c_char,
            nick_completion: ::std::os::raw::c_int,
            where_: *const ::std::os::raw::c_char,
        ),
    >,
    pub hook_modifier: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            modifier: *const ::std::os::raw::c_char,
            callback: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const ::std::os::raw::c_void,
                    data: *mut ::std::os::raw::c_void,
                    modifier: *const ::std::os::raw::c_char,
                    modifier_data: *const ::std::os::raw::c_char,
                    string: *const ::std::os::raw::c_char,
                ) -> *mut ::std::os::raw::c_char,
            >,
            callback_pointer: *const ::std::os::raw::c_void,
            callback_data: *mut ::std::os::raw::c_void,
        ) -> *mut t_hook,
    >,
    pub hook_modifier_exec: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            modifier: *const ::std::os::raw::c_char,
            modifier_data: *const ::std::os::raw::c_char,
            string: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub hook_info: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            info_name: *const ::std::os::raw::c_char,
            description: *const ::std::os::raw::c_char,
            args_description: *const ::std::os::raw::c_char,
            callback: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const ::std::os::raw::c_void,
                    data: *mut ::std::os::raw::c_void,
                    info_name: *const ::std::os::raw::c_char,
                    arguments: *const ::std::os::raw::c_char,
                ) -> *mut ::std::os::raw::c_char,
            >,
            callback_pointer: *const ::std::os::raw::c_void,
            callback_data: *mut ::std::os::raw::c_void,
        ) -> *mut t_hook,
    >,
    pub hook_info_hashtable: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            info_name: *const ::std::os::raw::c_char,
            description: *const ::std::os::raw::c_char,
            args_description: *const ::std::os::raw::c_char,
            output_description: *const ::std::os::raw::c_char,
            callback: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const ::std::os::raw::c_void,
                    data: *mut ::std::os::raw::c_void,
                    info_name: *const ::std::os::raw::c_char,
                    hashtable: *mut t_hashtable,
                ) -> *mut t_hashtable,
            >,
            callback_pointer: *const ::std::os::raw::c_void,
            callback_data: *mut ::std::os::raw::c_void,
        ) -> *mut t_hook,
    >,
    pub hook_infolist: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            infolist_name: *const ::std::os::raw::c_char,
            description: *const ::std::os::raw::c_char,
            pointer_description: *const ::std::os::raw::c_char,
            args_description: *const ::std::os::raw::c_char,
            callback: ::std::option::Option<
                unsafe extern "C" fn(
                    cb_pointer: *const ::std::os::raw::c_void,
                    data: *mut ::std::os::raw::c_void,
                    infolist_name: *const ::std::os::raw::c_char,
                    obj_pointer: *mut ::std::os::raw::c_void,
                    arguments: *const ::std::os::raw::c_char,
                ) -> *mut t_infolist,
            >,
            callback_pointer: *const ::std::os::raw::c_void,
            callback_data: *mut ::std::os::raw::c_void,
        ) -> *mut t_hook,
    >,
    pub hook_hdata: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            hdata_name: *const ::std::os::raw::c_char,
            description: *const ::std::os::raw::c_char,
            callback: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const ::std::os::raw::c_void,
                    data: *mut ::std::os::raw::c_void,
                    hdata_name: *const ::std::os::raw::c_char,
                ) -> *mut t_hdata,
            >,
            callback_pointer: *const ::std::os::raw::c_void,
            callback_data: *mut ::std::os::raw::c_void,
        ) -> *mut t_hook,
    >,
    pub hook_focus: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            area: *const ::std::os::raw::c_char,
            callback: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const ::std::os::raw::c_void,
                    data: *mut ::std::os::raw::c_void,
                    info: *mut t_hashtable,
                ) -> *mut t_hashtable,
            >,
            callback_pointer: *const ::std::os::raw::c_void,
            callback_data: *mut ::std::os::raw::c_void,
        ) -> *mut t_hook,
    >,
    pub hook_set: ::std::option::Option<
        unsafe extern "C" fn(
            hook: *mut t_hook,
            property: *const ::std::os::raw::c_char,
            value: *const ::std::os::raw::c_char,
        ),
    >,
    pub unhook: ::std::option::Option<unsafe extern "C" fn(hook: *mut t_hook)>,
    pub unhook_all: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            subplugin: *const ::std::os::raw::c_char,
        ),
    >,
    pub buffer_new: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            name: *const ::std::os::raw::c_char,
            input_callback: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const ::std::os::raw::c_void,
                    data: *mut ::std::os::raw::c_void,
                    buffer: *mut t_gui_buffer,
                    input_data: *const ::std::os::raw::c_char,
                ) -> ::std::os::raw::c_int,
            >,
            input_callback_pointer: *const ::std::os::raw::c_void,
            input_callback_data: *mut ::std::os::raw::c_void,
            close_callback: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const ::std::os::raw::c_void,
                    data: *mut ::std::os::raw::c_void,
                    buffer: *mut t_gui_buffer,
                ) -> ::std::os::raw::c_int,
            >,
            close_callback_pointer: *const ::std::os::raw::c_void,
            close_callback_data: *mut ::std::os::raw::c_void,
        ) -> *mut t_gui_buffer,
    >,
    pub buffer_search: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *const ::std::os::raw::c_char,
            name: *const ::std::os::raw::c_char,
        ) -> *mut t_gui_buffer,
    >,
    pub buffer_search_main: ::std::option::Option<unsafe extern "C" fn() -> *mut t_gui_buffer>,
    pub buffer_clear: ::std::option::Option<unsafe extern "C" fn(buffer: *mut t_gui_buffer)>,
    pub buffer_close: ::std::option::Option<unsafe extern "C" fn(buffer: *mut t_gui_buffer)>,
    pub buffer_merge: ::std::option::Option<
        unsafe extern "C" fn(buffer: *mut t_gui_buffer, target_buffer: *mut t_gui_buffer),
    >,
    pub buffer_unmerge: ::std::option::Option<
        unsafe extern "C" fn(buffer: *mut t_gui_buffer, number: ::std::os::raw::c_int),
    >,
    pub buffer_get_integer: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *mut t_gui_buffer,
            property: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub buffer_get_string: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *mut t_gui_buffer,
            property: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub buffer_get_pointer: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *mut t_gui_buffer,
            property: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub buffer_set: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *mut t_gui_buffer,
            property: *const ::std::os::raw::c_char,
            value: *const ::std::os::raw::c_char,
        ),
    >,
    pub buffer_set_pointer: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *mut t_gui_buffer,
            property: *const ::std::os::raw::c_char,
            pointer: *mut ::std::os::raw::c_void,
        ),
    >,
    pub buffer_string_replace_local_var: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *mut t_gui_buffer,
            string: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub buffer_match_list: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *mut t_gui_buffer,
            string: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub window_search_with_buffer:
        ::std::option::Option<unsafe extern "C" fn(buffer: *mut t_gui_buffer) -> *mut t_gui_window>,
    pub window_get_integer: ::std::option::Option<
        unsafe extern "C" fn(
            window: *mut t_gui_window,
            property: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub window_get_string: ::std::option::Option<
        unsafe extern "C" fn(
            window: *mut t_gui_window,
            property: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub window_get_pointer: ::std::option::Option<
        unsafe extern "C" fn(
            window: *mut t_gui_window,
            property: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub window_set_title:
        ::std::option::Option<unsafe extern "C" fn(title: *const ::std::os::raw::c_char)>,
    pub nicklist_add_group: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *mut t_gui_buffer,
            parent_group: *mut t_gui_nick_group,
            name: *const ::std::os::raw::c_char,
            color: *const ::std::os::raw::c_char,
            visible: ::std::os::raw::c_int,
        ) -> *mut t_gui_nick_group,
    >,
    pub nicklist_search_group: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *mut t_gui_buffer,
            from_group: *mut t_gui_nick_group,
            name: *const ::std::os::raw::c_char,
        ) -> *mut t_gui_nick_group,
    >,
    pub nicklist_add_nick: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *mut t_gui_buffer,
            group: *mut t_gui_nick_group,
            name: *const ::std::os::raw::c_char,
            color: *const ::std::os::raw::c_char,
            prefix: *const ::std::os::raw::c_char,
            prefix_color: *const ::std::os::raw::c_char,
            visible: ::std::os::raw::c_int,
        ) -> *mut t_gui_nick,
    >,
    pub nicklist_search_nick: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *mut t_gui_buffer,
            from_group: *mut t_gui_nick_group,
            name: *const ::std::os::raw::c_char,
        ) -> *mut t_gui_nick,
    >,
    pub nicklist_remove_group: ::std::option::Option<
        unsafe extern "C" fn(buffer: *mut t_gui_buffer, group: *mut t_gui_nick_group),
    >,
    pub nicklist_remove_nick: ::std::option::Option<
        unsafe extern "C" fn(buffer: *mut t_gui_buffer, nick: *mut t_gui_nick),
    >,
    pub nicklist_remove_all: ::std::option::Option<unsafe extern "C" fn(buffer: *mut t_gui_buffer)>,
    pub nicklist_get_next_item: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *mut t_gui_buffer,
            group: *mut *mut t_gui_nick_group,
            nick: *mut *mut t_gui_nick,
        ),
    >,
    pub nicklist_group_get_integer: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *mut t_gui_buffer,
            group: *mut t_gui_nick_group,
            property: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub nicklist_group_get_string: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *mut t_gui_buffer,
            group: *mut t_gui_nick_group,
            property: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub nicklist_group_get_pointer: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *mut t_gui_buffer,
            group: *mut t_gui_nick_group,
            property: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub nicklist_group_set: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *mut t_gui_buffer,
            group: *mut t_gui_nick_group,
            property: *const ::std::os::raw::c_char,
            value: *const ::std::os::raw::c_char,
        ),
    >,
    pub nicklist_nick_get_integer: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *mut t_gui_buffer,
            nick: *mut t_gui_nick,
            property: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub nicklist_nick_get_string: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *mut t_gui_buffer,
            nick: *mut t_gui_nick,
            property: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub nicklist_nick_get_pointer: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *mut t_gui_buffer,
            nick: *mut t_gui_nick,
            property: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub nicklist_nick_set: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *mut t_gui_buffer,
            nick: *mut t_gui_nick,
            property: *const ::std::os::raw::c_char,
            value: *const ::std::os::raw::c_char,
        ),
    >,
    pub bar_item_search: ::std::option::Option<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> *mut t_gui_bar_item,
    >,
    pub bar_item_new: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            name: *const ::std::os::raw::c_char,
            build_callback: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const ::std::os::raw::c_void,
                    data: *mut ::std::os::raw::c_void,
                    item: *mut t_gui_bar_item,
                    window: *mut t_gui_window,
                    buffer: *mut t_gui_buffer,
                    extra_info: *mut t_hashtable,
                ) -> *mut ::std::os::raw::c_char,
            >,
            build_callback_pointer: *const ::std::os::raw::c_void,
            build_callback_data: *mut ::std::os::raw::c_void,
        ) -> *mut t_gui_bar_item,
    >,
    pub bar_item_update:
        ::std::option::Option<unsafe extern "C" fn(name: *const ::std::os::raw::c_char)>,
    pub bar_item_remove: ::std::option::Option<unsafe extern "C" fn(item: *mut t_gui_bar_item)>,
    pub bar_search: ::std::option::Option<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> *mut t_gui_bar,
    >,
    pub bar_new: ::std::option::Option<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            hidden: *const ::std::os::raw::c_char,
            priority: *const ::std::os::raw::c_char,
            type_: *const ::std::os::raw::c_char,
            condition: *const ::std::os::raw::c_char,
            position: *const ::std::os::raw::c_char,
            filling_top_bottom: *const ::std::os::raw::c_char,
            filling_left_right: *const ::std::os::raw::c_char,
            size: *const ::std::os::raw::c_char,
            size_max: *const ::std::os::raw::c_char,
            color_fg: *const ::std::os::raw::c_char,
            color_delim: *const ::std::os::raw::c_char,
            color_bg: *const ::std::os::raw::c_char,
            separator: *const ::std::os::raw::c_char,
            items: *const ::std::os::raw::c_char,
        ) -> *mut t_gui_bar,
    >,
    pub bar_set: ::std::option::Option<
        unsafe extern "C" fn(
            bar: *mut t_gui_bar,
            property: *const ::std::os::raw::c_char,
            value: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub bar_update:
        ::std::option::Option<unsafe extern "C" fn(name: *const ::std::os::raw::c_char)>,
    pub bar_remove: ::std::option::Option<unsafe extern "C" fn(bar: *mut t_gui_bar)>,
    pub command: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            buffer: *mut t_gui_buffer,
            command: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub command_options: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            buffer: *mut t_gui_buffer,
            command: *const ::std::os::raw::c_char,
            options: *mut t_hashtable,
        ) -> ::std::os::raw::c_int,
    >,
    pub network_pass_proxy: ::std::option::Option<
        unsafe extern "C" fn(
            proxy: *const ::std::os::raw::c_char,
            sock: ::std::os::raw::c_int,
            address: *const ::std::os::raw::c_char,
            port: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub network_connect_to: ::std::option::Option<
        unsafe extern "C" fn(
            proxy: *const ::std::os::raw::c_char,
            address: *mut sockaddr,
            address_length: socklen_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub info_get: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            info_name: *const ::std::os::raw::c_char,
            arguments: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub info_get_hashtable: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            info_name: *const ::std::os::raw::c_char,
            hashtable: *mut t_hashtable,
        ) -> *mut t_hashtable,
    >,
    pub infolist_new: ::std::option::Option<
        unsafe extern "C" fn(plugin: *mut t_weechat_plugin) -> *mut t_infolist,
    >,
    pub infolist_new_item: ::std::option::Option<
        unsafe extern "C" fn(infolist: *mut t_infolist) -> *mut t_infolist_item,
    >,
    pub infolist_new_var_integer: ::std::option::Option<
        unsafe extern "C" fn(
            item: *mut t_infolist_item,
            name: *const ::std::os::raw::c_char,
            value: ::std::os::raw::c_int,
        ) -> *mut t_infolist_var,
    >,
    pub infolist_new_var_string: ::std::option::Option<
        unsafe extern "C" fn(
            item: *mut t_infolist_item,
            name: *const ::std::os::raw::c_char,
            value: *const ::std::os::raw::c_char,
        ) -> *mut t_infolist_var,
    >,
    pub infolist_new_var_pointer: ::std::option::Option<
        unsafe extern "C" fn(
            item: *mut t_infolist_item,
            name: *const ::std::os::raw::c_char,
            pointer: *mut ::std::os::raw::c_void,
        ) -> *mut t_infolist_var,
    >,
    pub infolist_new_var_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            item: *mut t_infolist_item,
            name: *const ::std::os::raw::c_char,
            pointer: *mut ::std::os::raw::c_void,
            size: ::std::os::raw::c_int,
        ) -> *mut t_infolist_var,
    >,
    pub infolist_new_var_time: ::std::option::Option<
        unsafe extern "C" fn(
            item: *mut t_infolist_item,
            name: *const ::std::os::raw::c_char,
            time: time_t,
        ) -> *mut t_infolist_var,
    >,
    pub infolist_search_var: ::std::option::Option<
        unsafe extern "C" fn(
            infolist: *mut t_infolist,
            name: *const ::std::os::raw::c_char,
        ) -> *mut t_infolist_var,
    >,
    pub infolist_get: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            infolist_name: *const ::std::os::raw::c_char,
            pointer: *mut ::std::os::raw::c_void,
            arguments: *const ::std::os::raw::c_char,
        ) -> *mut t_infolist,
    >,
    pub infolist_next: ::std::option::Option<
        unsafe extern "C" fn(infolist: *mut t_infolist) -> ::std::os::raw::c_int,
    >,
    pub infolist_prev: ::std::option::Option<
        unsafe extern "C" fn(infolist: *mut t_infolist) -> ::std::os::raw::c_int,
    >,
    pub infolist_reset_item_cursor:
        ::std::option::Option<unsafe extern "C" fn(infolist: *mut t_infolist)>,
    pub infolist_fields: ::std::option::Option<
        unsafe extern "C" fn(infolist: *mut t_infolist) -> *const ::std::os::raw::c_char,
    >,
    pub infolist_integer: ::std::option::Option<
        unsafe extern "C" fn(
            infolist: *mut t_infolist,
            var: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub infolist_string: ::std::option::Option<
        unsafe extern "C" fn(
            infolist: *mut t_infolist,
            var: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub infolist_pointer: ::std::option::Option<
        unsafe extern "C" fn(
            infolist: *mut t_infolist,
            var: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub infolist_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            infolist: *mut t_infolist,
            var: *const ::std::os::raw::c_char,
            size: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub infolist_time: ::std::option::Option<
        unsafe extern "C" fn(
            infolist: *mut t_infolist,
            var: *const ::std::os::raw::c_char,
        ) -> time_t,
    >,
    pub infolist_free: ::std::option::Option<unsafe extern "C" fn(infolist: *mut t_infolist)>,
    pub hdata_new: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            hdata_name: *const ::std::os::raw::c_char,
            var_prev: *const ::std::os::raw::c_char,
            var_next: *const ::std::os::raw::c_char,
            create_allowed: ::std::os::raw::c_int,
            delete_allowed: ::std::os::raw::c_int,
            callback_update: ::std::option::Option<
                unsafe extern "C" fn(
                    data: *mut ::std::os::raw::c_void,
                    hdata: *mut t_hdata,
                    pointer: *mut ::std::os::raw::c_void,
                    hashtable: *mut t_hashtable,
                ) -> ::std::os::raw::c_int,
            >,
            callback_update_data: *mut ::std::os::raw::c_void,
        ) -> *mut t_hdata,
    >,
    pub hdata_new_var: ::std::option::Option<
        unsafe extern "C" fn(
            hdata: *mut t_hdata,
            name: *const ::std::os::raw::c_char,
            offset: ::std::os::raw::c_int,
            type_: ::std::os::raw::c_int,
            update_allowed: ::std::os::raw::c_int,
            array_size: *const ::std::os::raw::c_char,
            hdata_name: *const ::std::os::raw::c_char,
        ),
    >,
    pub hdata_new_list: ::std::option::Option<
        unsafe extern "C" fn(
            hdata: *mut t_hdata,
            name: *const ::std::os::raw::c_char,
            pointer: *mut ::std::os::raw::c_void,
            flags: ::std::os::raw::c_int,
        ),
    >,
    pub hdata_get: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            hdata_name: *const ::std::os::raw::c_char,
        ) -> *mut t_hdata,
    >,
    pub hdata_get_var_offset: ::std::option::Option<
        unsafe extern "C" fn(
            hdata: *mut t_hdata,
            name: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub hdata_get_var_type: ::std::option::Option<
        unsafe extern "C" fn(
            hdata: *mut t_hdata,
            name: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub hdata_get_var_type_string: ::std::option::Option<
        unsafe extern "C" fn(
            hdata: *mut t_hdata,
            name: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub hdata_get_var_array_size: ::std::option::Option<
        unsafe extern "C" fn(
            hdata: *mut t_hdata,
            pointer: *mut ::std::os::raw::c_void,
            name: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub hdata_get_var_array_size_string: ::std::option::Option<
        unsafe extern "C" fn(
            hdata: *mut t_hdata,
            pointer: *mut ::std::os::raw::c_void,
            name: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub hdata_get_var_hdata: ::std::option::Option<
        unsafe extern "C" fn(
            hdata: *mut t_hdata,
            name: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub hdata_get_var: ::std::option::Option<
        unsafe extern "C" fn(
            hdata: *mut t_hdata,
            pointer: *mut ::std::os::raw::c_void,
            name: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub hdata_get_var_at_offset: ::std::option::Option<
        unsafe extern "C" fn(
            hdata: *mut t_hdata,
            pointer: *mut ::std::os::raw::c_void,
            offset: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub hdata_get_list: ::std::option::Option<
        unsafe extern "C" fn(
            hdata: *mut t_hdata,
            name: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub hdata_check_pointer: ::std::option::Option<
        unsafe extern "C" fn(
            hdata: *mut t_hdata,
            list: *mut ::std::os::raw::c_void,
            pointer: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub hdata_move: ::std::option::Option<
        unsafe extern "C" fn(
            hdata: *mut t_hdata,
            pointer: *mut ::std::os::raw::c_void,
            count: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub hdata_search: ::std::option::Option<
        unsafe extern "C" fn(
            hdata: *mut t_hdata,
            pointer: *mut ::std::os::raw::c_void,
            search: *const ::std::os::raw::c_char,
            move_: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub hdata_char: ::std::option::Option<
        unsafe extern "C" fn(
            hdata: *mut t_hdata,
            pointer: *mut ::std::os::raw::c_void,
            name: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_char,
    >,
    pub hdata_integer: ::std::option::Option<
        unsafe extern "C" fn(
            hdata: *mut t_hdata,
            pointer: *mut ::std::os::raw::c_void,
            name: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub hdata_long: ::std::option::Option<
        unsafe extern "C" fn(
            hdata: *mut t_hdata,
            pointer: *mut ::std::os::raw::c_void,
            name: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_long,
    >,
    pub hdata_string: ::std::option::Option<
        unsafe extern "C" fn(
            hdata: *mut t_hdata,
            pointer: *mut ::std::os::raw::c_void,
            name: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub hdata_pointer: ::std::option::Option<
        unsafe extern "C" fn(
            hdata: *mut t_hdata,
            pointer: *mut ::std::os::raw::c_void,
            name: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub hdata_time: ::std::option::Option<
        unsafe extern "C" fn(
            hdata: *mut t_hdata,
            pointer: *mut ::std::os::raw::c_void,
            name: *const ::std::os::raw::c_char,
        ) -> time_t,
    >,
    pub hdata_hashtable: ::std::option::Option<
        unsafe extern "C" fn(
            hdata: *mut t_hdata,
            pointer: *mut ::std::os::raw::c_void,
            name: *const ::std::os::raw::c_char,
        ) -> *mut t_hashtable,
    >,
    pub hdata_compare: ::std::option::Option<
        unsafe extern "C" fn(
            hdata: *mut t_hdata,
            pointer1: *mut ::std::os::raw::c_void,
            pointer2: *mut ::std::os::raw::c_void,
            name: *const ::std::os::raw::c_char,
            case_sensitive: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub hdata_set: ::std::option::Option<
        unsafe extern "C" fn(
            hdata: *mut t_hdata,
            pointer: *mut ::std::os::raw::c_void,
            name: *const ::std::os::raw::c_char,
            value: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub hdata_update: ::std::option::Option<
        unsafe extern "C" fn(
            hdata: *mut t_hdata,
            pointer: *mut ::std::os::raw::c_void,
            hashtable: *mut t_hashtable,
        ) -> ::std::os::raw::c_int,
    >,
    pub hdata_get_string: ::std::option::Option<
        unsafe extern "C" fn(
            hdata: *mut t_hdata,
            property: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub upgrade_new: ::std::option::Option<
        unsafe extern "C" fn(
            filename: *const ::std::os::raw::c_char,
            callback_read: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const ::std::os::raw::c_void,
                    data: *mut ::std::os::raw::c_void,
                    upgrade_file: *mut t_upgrade_file,
                    object_id: ::std::os::raw::c_int,
                    infolist: *mut t_infolist,
                ) -> ::std::os::raw::c_int,
            >,
            callback_read_pointer: *const ::std::os::raw::c_void,
            callback_read_data: *mut ::std::os::raw::c_void,
        ) -> *mut t_upgrade_file,
    >,
    pub upgrade_write_object: ::std::option::Option<
        unsafe extern "C" fn(
            upgrade_file: *mut t_upgrade_file,
            object_id: ::std::os::raw::c_int,
            infolist: *mut t_infolist,
        ) -> ::std::os::raw::c_int,
    >,
    pub upgrade_read: ::std::option::Option<
        unsafe extern "C" fn(upgrade_file: *mut t_upgrade_file) -> ::std::os::raw::c_int,
    >,
    pub upgrade_close:
        ::std::option::Option<unsafe extern "C" fn(upgrade_file: *mut t_upgrade_file)>,
}
#[test]
fn bindgen_test_layout_t_weechat_plugin() {
    assert_eq!(
        ::std::mem::size_of::<t_weechat_plugin>(),
        2424usize,
        concat!("Size of: ", stringify!(t_weechat_plugin))
    );
    assert_eq!(
        ::std::mem::align_of::<t_weechat_plugin>(),
        8usize,
        concat!("Alignment of ", stringify!(t_weechat_plugin))
    );
}
extern "C" {
    pub fn weechat_plugin_init(
        plugin: *mut t_weechat_plugin,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn weechat_plugin_end(plugin: *mut t_weechat_plugin) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_hashtable_item {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_hook {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_infolist_var {
    pub _address: u8,
}
